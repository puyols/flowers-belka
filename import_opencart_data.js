/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OpenCart –≤ Next.js –ø—Ä–æ–µ–∫—Ç
 */

const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const exportedData = JSON.parse(fs.readFileSync('opencart_products_export.json', 'utf8'));

console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenCart...');
console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${exportedData.products.length}`);
console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${exportedData.categories.length}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug
function createUniqueSlug(name, existingSlugs) {
    let baseSlug = name
        .toLowerCase()
        .replace(/[^a-zA-Z0-9–∞-—è—ë\s]/g, '')
        .replace(/\s+/g, '-')
        .trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ñ–∏—Å—ã
    baseSlug = baseSlug.replace(/-+/g, '-').replace(/^-|-$/g, '');
    
    if (!baseSlug) {
        baseSlug = 'product';
    }
    
    let slug = baseSlug;
    let counter = 1;
    
    while (existingSlugs.includes(slug)) {
        slug = `${baseSlug}-${counter}`;
        counter++;
    }
    
    existingSlugs.push(slug);
    return slug;
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
const existingSlugs = [];
const processedProducts = exportedData.products.map((product, index) => {
    const slug = createUniqueSlug(product.name, existingSlugs);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const productImages = [];
    product.images.forEach((imagePath, imgIndex) => {
        const imageName = path.basename(imagePath);
        const sourceImagePath = path.join('image/catalog', imageName);
        const targetImagePath = path.join('flowers-belka-nextjs/public/images/products', imageName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (fs.existsSync(sourceImagePath)) {
            try {
                // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                fs.copyFileSync(sourceImagePath, targetImagePath);
                productImages.push(`/images/products/${imageName}`);
                console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageName}`);
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${imageName}: ${error.message}`);
                productImages.push('/images/placeholder.jpg');
            }
        } else {
            console.log(`‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${sourceImagePath}`);
            productImages.push('/images/placeholder.jpg');
        }
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º placeholder
    if (productImages.length === 0) {
        productImages.push('/images/placeholder.jpg');
    }
    
    return {
        id: product.id,
        name: product.name,
        slug: slug,
        price: product.price,
        images: productImages,
        description: product.description || `–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç "${product.name}" –æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ Belka-flowers. –°–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.`,
        shortDescription: product.shortDescription || `${product.name} - ${product.price} —Ä—É–±.`,
        category: product.category || '–ë—É–∫–µ—Ç—ã',
        inStock: product.inStock,
        isHit: product.isHit,
        tags: ['—Ü–≤–µ—Ç—ã', '–±—É–∫–µ—Ç', '–¥–æ—Å—Ç–∞–≤–∫–∞'],
        attributes: {
            '–ú–æ–¥–µ–ª—å': product.model || '',
            '–ê—Ä—Ç–∏–∫—É–ª': product.sku || '',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': product.quantity.toString()
        }
    };
});

console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${processedProducts.length}`);

// –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const productsFileContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ OpenCart
// –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${exportedData.exportDate}

export interface Product {
  id: number;
  name: string;
  slug: string;
  price: number;
  images: string[];
  description: string;
  shortDescription: string;
  category: string;
  inStock: boolean;
  isHit: boolean;
  tags: string[];
  attributes: Record<string, string>;
}

export const products: Product[] = ${JSON.stringify(processedProducts, null, 2)};

export default products;
`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const productsFilePath = 'flowers-belka-nextjs/src/data/products-opencart.ts';
fs.writeFileSync(productsFilePath, productsFileContent, 'utf8');

console.log(`\n‚úÖ –§–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${productsFilePath}`);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const processedCategories = exportedData.categories.map(category => ({
    id: category.id,
    name: category.name,
    slug: category.slug,
    description: category.description || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name} –≤ —Ü–≤–µ—Ç–æ—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ Belka-flowers`,
    parentId: category.parentId
}));

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const categoriesFileContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ OpenCart
// –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${exportedData.exportDate}

export interface Category {
  id: number;
  name: string;
  slug: string;
  description: string;
  parentId: number;
}

export const categories: Category[] = ${JSON.stringify(processedCategories, null, 2)};

export default categories;
`;

const categoriesFilePath = 'flowers-belka-nextjs/src/data/categories-opencart.ts';
fs.writeFileSync(categoriesFilePath, categoriesFileContent, 'utf8');

console.log(`‚úÖ –§–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${categoriesFilePath}`);

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const statsContent = `# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ OpenCart

**–î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞:** ${new Date().toLocaleString('ru-RU')}
**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ OpenCart:** ${exportedData.exportDate}

## üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

- **–¢–æ–≤–∞—Ä–æ–≤:** ${processedProducts.length}
- **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** ${processedCategories.length}
- **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** ${processedProducts.reduce((sum, p) => sum + p.images.length, 0)}

## üè∑Ô∏è –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ:

${processedProducts
    .sort((a, b) => b.price - a.price)
    .slice(0, 10)
    .map((p, i) => `${i + 1}. **${p.name}** - ${p.price} —Ä—É–±.`)
    .join('\n')}

## üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:

${processedCategories.map(c => `- **${c.name}** (ID: ${c.id})`).join('\n')}

## üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö:
   - \`src/data/products-opencart.ts\`
   - \`src/data/categories-opencart.ts\`

2. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤

4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SEO –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
`;

fs.writeFileSync('import_stats.md', statsContent, 'utf8');

console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
console.log(`üìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: import_stats.md`);
console.log(`\nüìã –ò—Ç–æ–≥–æ:`);
console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${processedProducts.length}`);
console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${processedCategories.length}`);
console.log(`   - –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: 3`);
