const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL
function extractImageName(url) {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    const decodedUrl = decodeURIComponent(url);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const parts = decodedUrl.split('/');
    let fileName = parts[parts.length - 1];
    
    // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -250x250h.jpg)
    fileName = fileName.replace(/-\d+x\d+[hw]?\.(jpg|jpeg|png|JPG|JPEG|PNG)$/i, '.$1');
    
    return fileName;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function findLocalImage(imageName, localImages) {
  // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (localImages.includes(imageName)) {
    return imageName;
  }
  
  // –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  const lowerImageName = imageName.toLowerCase();
  const found = localImages.find(img => img.toLowerCase() === lowerImageName);
  if (found) {
    return found;
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
  const nameWithoutExt = imageName.replace(/\.(jpg|jpeg|png)$/i, '');
  const foundPartial = localImages.find(img => {
    const imgWithoutExt = img.replace(/\.(jpg|jpeg|png)$/i, '');
    return imgWithoutExt.toLowerCase().includes(nameWithoutExt.toLowerCase()) ||
           nameWithoutExt.toLowerCase().includes(imgWithoutExt.toLowerCase());
  });
  
  return foundPartial || null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function fixImages() {
  try {
    console.log('–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...');
    
    // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imagesDir = './flowers-belka-nextjs/public/images/products';
    const localImages = fs.readdirSync(imagesDir).filter(file => 
      /\.(jpg|jpeg|png|JPG|JPEG|PNG)$/i.test(file)
    );
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${localImages.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const filePath = './flowers-belka-nextjs/src/data/products-parsed.ts';
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageUrlRegex = /'https:\/\/flowers-belka\.ru\/image\/cache\/catalog\/[^']+'/g;
    const matches = content.match(imageUrlRegex);
    
    if (!matches) {
      console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${matches.length} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã`);
    
    let replacedCount = 0;
    let notFoundCount = 0;
    
    // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π URL
    matches.forEach(match => {
      const url = match.slice(1, -1); // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
      const imageName = extractImageName(url);
      
      if (imageName) {
        const localImage = findLocalImage(imageName, localImages);
        
        if (localImage) {
          const newPath = `'/images/products/${localImage}'`;
          content = content.replace(match, newPath);
          console.log(`‚úÖ ${imageName} ‚Üí ${localImage}`);
          replacedCount++;
        } else {
          console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${imageName}`);
          // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ placeholder
          const placeholderPath = `'/images/placeholder.jpg'`;
          content = content.replace(match, placeholderPath);
          notFoundCount++;
        }
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, content);
    
    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ!`);
    console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: ${replacedCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ placeholder)`);
    console.log('–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ URL –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏.');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
fixImages();
