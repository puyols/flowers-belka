<?php
// –¢–µ—Å—Ç –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π API
header('Content-Type: text/html; charset=utf-8');

echo "<h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π Flowers Belka</h1>";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
require_once('config.php');

echo "<h2>üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h2>";
echo "<ul>";
echo "<li><strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> " . DB_DATABASE . "</li>";
echo "<li><strong>–•–æ—Å—Ç:</strong> " . DB_HOSTNAME . "</li>";
echo "<li><strong>–ü—Ä–µ—Ñ–∏–∫—Å:</strong> " . DB_PREFIX . "</li>";
echo "</ul>";

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "<h2>üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:</h2>";
try {
    $pdo = new PDO(
        'mysql:host=' . DB_HOSTNAME . ';dbname=' . DB_DATABASE . ';charset=utf8',
        DB_USERNAME,
        DB_PASSWORD,
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );
    echo "<p style='color: green;'>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!</p>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    $stmt = $pdo->query("SELECT COUNT(*) as count FROM " . DB_PREFIX . "product WHERE status = 1");
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    echo "<p>üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: <strong>" . $result['count'] . "</strong></p>";
    
} catch (PDOException $e) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " . $e->getMessage() . "</p>";
    exit;
}

echo "<h2>üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:</h2>";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
function testAPI($endpoint, $description) {
    $url = "http://localhost:8080/api_products.php?" . $endpoint;
    echo "<h3>$description</h3>";
    echo "<p><strong>URL:</strong> <code>$endpoint</code></p>";
    
    $context = stream_context_create([
        'http' => [
            'timeout' => 5,
            'method' => 'GET',
        ]
    ]);
    
    $result = @file_get_contents($url, false, $context);
    
    if ($result === false) {
        echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞</p>";
        return;
    }
    
    $data = json_decode($result, true);
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ JSON: " . json_last_error_msg() . "</p>";
        echo "<pre>" . htmlspecialchars(substr($result, 0, 500)) . "</pre>";
        return;
    }
    
    if (isset($data['success']) && $data['success']) {
        echo "<p style='color: green;'>‚úÖ –£—Å–ø–µ—à–Ω–æ</p>";
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if (isset($data['products'])) {
            echo "<p>üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: " . count($data['products']) . "</p>";
            if (isset($data['pagination'])) {
                echo "<p>üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–æ: " . $data['pagination']['pages'] . "</p>";
            }
        } elseif (isset($data['categories'])) {
            echo "<p>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—É—á–µ–Ω–æ: " . count($data['categories']) . "</p>";
        } elseif (isset($data['stats'])) {
            echo "<p>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:</p>";
            echo "<ul>";
            foreach ($data['stats'] as $key => $value) {
                if (is_array($value)) {
                    echo "<li><strong>$key:</strong> " . count($value) . " —ç–ª–µ–º–µ–Ω—Ç–æ–≤</li>";
                } else {
                    echo "<li><strong>$key:</strong> $value</li>";
                }
            }
            echo "</ul>";
        } elseif (isset($data['results'])) {
            echo "<p>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: " . count($data['results']) . "</p>";
        } elseif (isset($data['price_range'])) {
            echo "<p>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: " . $data['price_range']['min'] . " - " . $data['price_range']['max'] . " —Ä—É–±.</p>";
        }
    } else {
        echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ API: " . ($data['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>";
    }
    
    echo "<hr>";
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ endpoints
testAPI("action=products&limit=5", "üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–±–∞–∑–æ–≤—ã–π)");
testAPI("action=products&page=1&limit=3&sort=price_asc", "üì¶ –¢–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π");
testAPI("action=products&min_price=1000&max_price=5000", "üì¶ –¢–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ü–µ–Ω–µ");
testAPI("action=categories", "üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
testAPI("action=search&q=—Ä–æ–∑–∞&limit=3", "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤");
testAPI("action=stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞");
testAPI("action=price_range", "üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω");
testAPI("action=product&id=1", "üå∏ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä");

echo "<h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h2>";
echo "<p>–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ (‚úÖ), —Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>";
echo "<p><strong>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</strong> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Next.js —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞</p>";

echo "<h2>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h2>";
echo "<ul>";
echo "<li><a href='test_api_advanced.html' target='_blank'>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç API</a></li>";
echo "<li><a href='test_api.html' target='_blank'>–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç API</a></li>";
echo "<li><a href='test_db_connection.php' target='_blank'>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</a></li>";
echo "</ul>";
?>
