const fs = require('fs');
const https = require('https');
const http = require('http');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
const fileContent = fs.readFileSync('./src/data/products-parsed.ts', 'utf8');

// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const imageRegex = /'(https:\/\/flowers-belka\.ru\/[^']+)'/g;
const images = [];
let match;

while ((match = imageRegex.exec(fileContent)) !== null) {
  images.push(match[1]);
}

console.log(`–ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
function checkUrl(url) {
  return new Promise((resolve) => {
    const protocol = url.startsWith('https:') ? https : http;
    
    const req = protocol.get(url, (res) => {
      resolve({
        url,
        status: res.statusCode,
        ok: res.statusCode >= 200 && res.statusCode < 300
      });
    });
    
    req.on('error', (err) => {
      resolve({
        url,
        status: 'ERROR',
        ok: false,
        error: err.message
      });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      resolve({
        url,
        status: 'TIMEOUT',
        ok: false,
        error: 'Timeout'
      });
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkAllImages() {
  const results = [];
  const brokenImages = [];
  
  console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...\n');
  
  for (let i = 0; i < images.length; i++) {
    const url = images[i];
    process.stdout.write(`\r–ü—Ä–æ–≤–µ—Ä—è–µ–º ${i + 1}/${images.length}: ${url.substring(0, 60)}...`);
    
    const result = await checkUrl(url);
    results.push(result);
    
    if (!result.ok) {
      brokenImages.push(result);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${results.filter(r => r.ok).length}`);
  console.log(`‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${brokenImages.length}`);
  
  if (brokenImages.length > 0) {
    console.log('\nüö® –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:');
    brokenImages.forEach((img, index) => {
      console.log(`${index + 1}. ${img.url}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${img.status} ${img.error ? `(${img.error})` : ''}\n`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
    fs.writeFileSync('broken-images.json', JSON.stringify(brokenImages, null, 2));
    console.log('üìù –°–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ broken-images.json');
  } else {
    console.log('\nüéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  }
}

checkAllImages().catch(console.error);
