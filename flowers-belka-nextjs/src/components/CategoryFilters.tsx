'use client';

import React from 'react';

interface FilterOptions {
  priceFrom: string;
  priceTo: string;
  flowerType: string;
  color: string;
  occasion: string;
  sortBy: string;
}

interface CategoryFiltersProps {
  filters: FilterOptions;
  setFilters: React.Dispatch<React.SetStateAction<FilterOptions>>;
  category: string;
  productCount: number;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const filterConfigs = {
  bukety_tsvetov: {
    flowerTypes: [
      { value: '—Ä–æ–∑—ã', label: 'üåπ —Å —Ä–æ–∑–∞–º–∏', count: 76 },
      { value: '—Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã', label: 'üåº —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏', count: 29 },
      { value: '—ç—É—Å—Ç–æ–º–∞', label: 'üíô —Å —ç—É—Å—Ç–æ–º–æ–π', count: 29 },
      { value: '–≥–≤–æ–∑–¥–∏–∫–∏', label: 'üå∫ —Å –≥–≤–æ–∑–¥–∏–∫–∞–º–∏', count: 25 },
      { value: '–∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏—è', label: 'üå∫ —Å –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π', count: 17 },
      { value: '—Ç—é–ª—å–ø–∞–Ω—ã', label: 'üå∑ —Å —Ç—é–ª—å–ø–∞–Ω–∞–º–∏', count: 15 },
      { value: '–ø–∏–æ–Ω—ã', label: 'üå∏ —Å –ø–∏–æ–Ω–∞–º–∏', count: 20 },
      { value: '–≥–æ—Ä—Ç–µ–Ω–∑–∏—è', label: 'üíê —Å –≥–æ—Ä—Ç–µ–Ω–∑–∏–µ–π', count: 8 },
      { value: '–º–∞—Ç—Ç–∏–æ–ª–∞', label: 'üåø —Å –º–∞—Ç—Ç–∏–æ–ª–æ–π', count: 6 },
      { value: '—Ä–æ–º–∞—à–∫–∞', label: 'üåº —Å —Ä–æ–º–∞—à–∫–∞–º–∏', count: 5 },
      { value: '—Ä–∞–Ω—É–Ω–∫—É–ª—é—Å—ã', label: 'üåª —Å —Ä–∞–Ω—É–Ω–∫—É–ª—é—Å–∞–º–∏', count: 4 },
      { value: '–≥–∏–ø—Å–æ—Ñ–∏–ª–∞', label: 'ü§ç —Å –≥–∏–ø—Å–æ—Ñ–∏–ª–æ–π', count: 3 },
      { value: '–∞–Ω–µ–º–æ–Ω—ã', label: 'üå∫ —Å –∞–Ω–µ–º–æ–Ω–∞–º–∏', count: 1 },
      { value: '—Å–∏—Ä–µ–Ω—å', label: 'üíú —Å —Å–∏—Ä–µ–Ω—å—é', count: 5 },
      { value: '—Å–º–µ—à–∞–Ω–Ω—ã–π', label: 'üé® —Å–º–µ—à–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã', count: 4 }
    ]
  },
  rozy: {
    flowerTypes: [
      { value: '—ç–∫–≤–∞–¥–æ—Ä', label: 'üåπ –†–æ–∑—ã –≠–∫–≤–∞–¥–æ—Ä', count: 24 },
      { value: '–∫–µ–Ω–∏—è', label: 'üåπ –†–æ–∑—ã –ö–µ–Ω–∏—è', count: 9 },
      { value: '–∫—É—Å—Ç–æ–≤—ã–µ', label: 'üåπ –ö—É—Å—Ç–æ–≤—ã–µ —Ä–æ–∑—ã', count: 26 },
      { value: '–ø–∏–æ–Ω–æ–≤–∏–¥–Ω—ã–µ', label: 'üåπ –ü–∏–æ–Ω–æ–≤–∏–¥–Ω—ã–µ —Ä–æ–∑—ã', count: 9 }
    ]
  },
  tulpany: {
    flowerTypes: [
      { value: '–±–µ–ª—ã–µ', label: 'üå∑ –ë–µ–ª—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã', count: 3 },
      { value: '—Ä–æ–∑–æ–≤—ã–µ', label: 'üå∑ –†–æ–∑–æ–≤—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã', count: 6 },
      { value: '–∂–µ–ª—Ç—ã–µ', label: 'üå∑ –ñ–µ–ª—Ç—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã', count: 2 },
      { value: '–∫—Ä–µ–º–æ–≤—ã–µ', label: 'üå∑ –ö—Ä–µ–º–æ–≤—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã', count: 2 },
      { value: '–ø–∏–æ–Ω–æ–≤–∏–¥–Ω—ã–µ', label: 'üå∑ –ü–∏–æ–Ω–æ–≤–∏–¥–Ω—ã–µ —Ç—é–ª—å–ø–∞–Ω—ã', count: 2 }
    ]
  },
  piony: {
    flowerTypes: [
      { value: '–±–µ–ª—ã–µ', label: 'üå∏ –ë–µ–ª—ã–µ –ø–∏–æ–Ω—ã', count: 3 },
      { value: '—Ä–æ–∑–æ–≤—ã–µ', label: 'üå∏ –†–æ–∑–æ–≤—ã–µ –ø–∏–æ–Ω—ã', count: 5 },
      { value: '–∫—Ä–∞—Å–Ω—ã–µ', label: 'üå∏ –ö—Ä–∞—Å–Ω—ã–µ –ø–∏–æ–Ω—ã', count: 2 },
      { value: '—Å–º–µ—à–∞–Ω–Ω—ã–µ', label: 'üå∏ –°–º–µ—à–∞–Ω–Ω—ã–µ –ø–∏–æ–Ω—ã', count: 1 }
    ]
  }
};

const colors = [
  { value: '–±–µ–ª—ã–µ', label: 'ü§ç –ë–µ–ª—ã–µ', count: 9 },
  { value: '—Ä–æ–∑–æ–≤—ã–µ', label: 'ü©∑ –†–æ–∑–æ–≤—ã–µ', count: 8 },
  { value: '–∫—Ä–∞—Å–Ω—ã–µ', label: '‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–µ', count: 6 },
  { value: '—Å–∏—Ä–µ–Ω–µ–≤—ã–µ', label: 'üíú –°–∏—Ä–µ–Ω–µ–≤—ã–µ', count: 4 },
  { value: '–∂–µ–ª—Ç—ã–µ', label: 'üíõ –ñ–µ–ª—Ç—ã–µ', count: 2 },
  { value: '–ø–µ—Ä—Å–∏–∫–æ–≤—ã–µ', label: 'üß° –ü–µ—Ä—Å–∏–∫–æ–≤—ã–µ', count: 2 }
];

const occasions = [
  { value: '8_marta', label: 'üå∑ 8 –ú–∞—Ä—Ç–∞', count: 28 },
  { value: 'den_rozhdeniya', label: 'üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', count: 2 },
  { value: 'den_materi', label: 'üë©‚Äçüëß‚Äçüë¶ –î–µ–Ω—å –º–∞—Ç–µ—Ä–∏', count: 2 },
  { value: '14_fevralya', label: 'üíï 14 —Ñ–µ–≤—Ä–∞–ª—è', count: 2 },
  { value: 'roskoshnyy', label: 'üíé –†–æ—Å–∫–æ—à–Ω—ã–µ', count: 12 },
  { value: 'nezhnyy', label: 'üå∏ –ù–µ–∂–Ω—ã–µ', count: 11 },
  { value: 'elegantnyy', label: '‚ú® –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ', count: 6 },
  { value: 'romantika', label: 'üíù –†–æ–º–∞–Ω—Ç–∏–∫–∞', count: 3 },
  { value: 'mame', label: 'üë© –ú–∞–º–µ', count: 2 },
  { value: 'devushke', label: 'üëß –î–µ–≤—É—à–∫–µ', count: 1 },
  { value: 'devochke', label: 'üë∂ –î–µ–≤–æ—á–∫–µ', count: 1 },
  { value: 'lyubimoy', label: 'üíñ –õ—é–±–∏–º–æ–π', count: 1 },
  { value: 'muzhchine', label: 'üë® –ú—É–∂—á–∏–Ω–µ', count: 1 },
  { value: 'uchitelyu', label: 'üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—é', count: 1 }
];

export default function CategoryFilters({ filters, setFilters, category, productCount }: CategoryFiltersProps) {
  const config = filterConfigs[category as keyof typeof filterConfigs] || filterConfigs.bukety_tsvetov;

  const resetFilters = () => {
    setFilters({
      priceFrom: '',
      priceTo: '',
      flowerType: '',
      color: '',
      occasion: '',
      sortBy: 'number_desc'
    });
  };

  return (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg border border-white/20 p-6 mb-8">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-bold text-gray-900 flex items-center">
          <svg className="w-6 h-6 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
          </svg>
          –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        </h3>
        <button
          onClick={resetFilters}
          className="text-sm text-green-600 hover:text-green-700 font-medium transition-colors"
        >
          –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
        {/* Price filter */}
        <div className="space-y-3">
          <label className="block text-sm font-semibold text-gray-700">
            üí∞ –¶–µ–Ω–∞
          </label>
          <div className="flex items-center space-x-3">
            <input
              type="number"
              placeholder="–æ—Ç"
              value={filters.priceFrom}
              onChange={(e) => setFilters(prev => ({ ...prev, priceFrom: e.target.value }))}
              className="flex-1 px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
            />
            <span className="text-gray-400 font-medium">‚Äî</span>
            <input
              type="number"
              placeholder="–¥–æ"
              value={filters.priceTo}
              onChange={(e) => setFilters(prev => ({ ...prev, priceTo: e.target.value }))}
              className="flex-1 px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
            />
            <span className="text-sm text-gray-500 font-medium">‚ÇΩ</span>
          </div>
        </div>

        {/* Flower type filter */}
        <div className="space-y-3">
          <label className="block text-sm font-semibold text-gray-700">
            üå∏ –¢–∏–ø —Ü–≤–µ—Ç–æ–≤
          </label>
          <select
            value={filters.flowerType}
            onChange={(e) => setFilters(prev => ({ ...prev, flowerType: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all bg-white"
          >
            <option value="">–í—Å–µ –≤–∏–¥—ã</option>
            {config.flowerTypes.map(type => (
              <option key={type.value} value={type.value}>
                {type.label} ({type.count} {type.count === 1 ? '–±—É–∫–µ—Ç' : type.count < 5 ? '–±—É–∫–µ—Ç–∞' : '–±—É–∫–µ—Ç–æ–≤'})
              </option>
            ))}
          </select>
        </div>

        {/* Color filter */}
        <div className="space-y-3">
          <label className="block text-sm font-semibold text-gray-700">
            üé® –¶–≤–µ—Ç
          </label>
          <select
            value={filters.color}
            onChange={(e) => setFilters(prev => ({ ...prev, color: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all bg-white"
          >
            <option value="">–õ—é–±–æ–π —Ü–≤–µ—Ç</option>
            {colors.map(color => (
              <option key={color.value} value={color.value}>
                {color.label} ({color.count} {color.count === 1 ? '–±—É–∫–µ—Ç' : color.count < 5 ? '–±—É–∫–µ—Ç–∞' : '–±—É–∫–µ—Ç–æ–≤'})
              </option>
            ))}
          </select>
        </div>

        {/* Occasion filter */}
        <div className="space-y-3">
          <label className="block text-sm font-semibold text-gray-700">
            üéâ –ü–æ–≤–æ–¥
          </label>
          <select
            value={filters.occasion}
            onChange={(e) => setFilters(prev => ({ ...prev, occasion: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all bg-white"
          >
            <option value="">–õ—é–±–æ–π –ø–æ–≤–æ–¥</option>
            {occasions.map(occasion => (
              <option key={occasion.value} value={occasion.value}>
                {occasion.label} ({occasion.count} {occasion.count === 1 ? '–±—É–∫–µ—Ç' : occasion.count < 5 ? '–±—É–∫–µ—Ç–∞' : '–±—É–∫–µ—Ç–æ–≤'})
              </option>
            ))}
          </select>
        </div>

        {/* Sort */}
        <div className="space-y-3">
          <label className="block text-sm font-semibold text-gray-700">
            üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
          </label>
          <select
            value={filters.sortBy}
            onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}
            className="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all bg-white"
          >
            <option value="number_desc">–ü–æ –Ω–æ–º–µ—Ä—É (–Ω–æ–≤—ã–µ)</option>
            <option value="popular">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
            <option value="price_asc">–ü–æ —Ü–µ–Ω–µ ‚Üó</option>
            <option value="price_desc">–ü–æ —Ü–µ–Ω–µ ‚Üò</option>
            <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
          </select>
        </div>
      </div>

      {/* Active filters display */}
      {(filters.flowerType || filters.color || filters.occasion || filters.priceFrom || filters.priceTo) && (
        <div className="mt-6 pt-4 border-t border-gray-200">
          <div className="flex flex-wrap items-center gap-2">
            <span className="text-sm text-gray-600 font-medium">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>
            {filters.flowerType && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                {filters.flowerType}
                <button
                  onClick={() => setFilters(prev => ({ ...prev, flowerType: '' }))}
                  className="ml-2 text-green-600 hover:text-green-800"
                >
                  √ó
                </button>
              </span>
            )}
            {filters.color && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {filters.color}
                <button
                  onClick={() => setFilters(prev => ({ ...prev, color: '' }))}
                  className="ml-2 text-blue-600 hover:text-blue-800"
                >
                  √ó
                </button>
              </span>
            )}
            {filters.occasion && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                {filters.occasion.replace('_', ' ')}
                <button
                  onClick={() => setFilters(prev => ({ ...prev, occasion: '' }))}
                  className="ml-2 text-purple-600 hover:text-purple-800"
                >
                  √ó
                </button>
              </span>
            )}
            {(filters.priceFrom || filters.priceTo) && (
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                {filters.priceFrom && `–æ—Ç ${filters.priceFrom}‚ÇΩ`}
                {filters.priceFrom && filters.priceTo && ' '}
                {filters.priceTo && `–¥–æ ${filters.priceTo}‚ÇΩ`}
                <button
                  onClick={() => setFilters(prev => ({ ...prev, priceFrom: '', priceTo: '' }))}
                  className="ml-2 text-yellow-600 hover:text-yellow-800"
                >
                  √ó
                </button>
              </span>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
